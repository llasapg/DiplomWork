<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiplomaSolution</name>
    </assembly>
    <members>
        <member name="T:DiplomaSolution.Controllers.AccountController">
            <summary>
            Controller to perform actions with accounts ( Create / ChangePassword and etc... )
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.SignInManager{DiplomaSolution.Models.ServiceUser},Microsoft.AspNetCore.Identity.UserManager{DiplomaSolution.Models.ServiceUser},DiplomaSolution.Services.Interfaces.ISendEmailService,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)">
            <summary>
            Basic construstor to perform DI
            </summary>
            <param name="signInManager"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.Login(DiplomaSolution.ViewModels.LoginViewModel,System.String)">
            <summary>
            Basic action to perform login for both external and our own customers
            </summary>
            <param name="customer">Customer model</param>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.Login(System.String)">
            <summary>
            Get action to return login page ( currently is not fully inmplemented )
            </summary>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <returns>Login page</returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ExternalLogIn(System.String,System.String)">
            <summary>
            Action to perform extermal provider login ( Google, Facebook and etc... )
            </summary>
            <param name="provider">Provider name</param>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ExternalLoginCallBack(System.String,System.String)">
            <summary>
            External login callback to perform login operations on our side if login was successful
            </summary>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <param name="remoteError">Optional - can be null, if everything is okey while login on provider side</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.Logout">
            <summary>
            Action to perdorm user logout ( delete cookies and clear User prop of basic controller class )
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ConfirmEmail(System.String,System.String)">
            <summary>
            Action to perform email confirmation --> filed EmailConfirmed is changing to true
            </summary>
            <param name="userId">User id, to find it</param>
            <param name="token">Generated token</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.AccessDenied(System.String)">
            <summary>
            Access denied page
            </summary>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPasswordWithEmail">
            <summary>
            Action to return reset password view ( First step )
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPassword(DiplomaSolution.ViewModels.ResetPasswordConfirmationModel)">
            <summary>
            // todo ( add check, that model is correct ) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPassword(System.String,System.String)">
            <summary>
            Step 3
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPasswordConfirmationPage(DiplomaSolution.ViewModels.ResetPasswordModel)">
            <summary>
            (Step 2)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Controllers.RegistrationController">
            <summary>
            This controller is used to create customer and etc stuff...
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.RegistrationController.#ctor(Microsoft.Extensions.Logging.ILogger{DiplomaSolution.Controllers.RegistrationController},Microsoft.AspNetCore.Identity.UserManager{DiplomaSolution.Models.ServiceUser},Microsoft.AspNetCore.Identity.SignInManager{DiplomaSolution.Models.ServiceUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},DiplomaSolution.Services.Interfaces.ISendEmailService)">
            <summary>
            Ctor to get all needed DI services
            </summary>
            <param name="logger"></param>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="roleManager"></param>
            <param name="sendEmailService"></param>
        </member>
        <member name="M:DiplomaSolution.Controllers.RegistrationController.ConfirmationPage(DiplomaSolution.Models.Customer)">
            <summary>
            Add there a return url to proceed with the customers ...
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.RegistrationController.CheckIfWeHaveRole(System.String)">
            <summary>
            Method to verify, that we have needed role, before appling it to customer
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Helpers.Attributes.EmailPatternAttribute.IsValid(System.Object)">
            <summary>
            Overrided method to validate provided email ( if true --> email template is good )
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Models.CustomerContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:DiplomaSolution.Models.CustomerContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{DiplomaSolution.Models.CustomerContext})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:DiplomaSolution.Models.CustomerContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:DiplomaSolution.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:DiplomaSolution.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DiplomaSolution.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Security.EmailTokenOptions">
            <summary>
            Custom token provider options to specify token life-span
            </summary>
        </member>
        <member name="T:DiplomaSolution.Security.DefaultHandler">
            <summary>
            Default handler to check if whe have needed claims
            </summary>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.FileManagerService.LoadFileToTheServer(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Loads customer images to DB to deal with them in future
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:DiplomaSolution.Startup">
            <summary>
            Basic class, what creates request handling pipeline and DI provider
            </summary>
        </member>
        <member name="P:DiplomaSolution.Startup.Configuration">
            <summary>
            Basic configuration prop what stores all provided configurations
            </summary>
        </member>
        <member name="M:DiplomaSolution.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Ctop to get configurations
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:DiplomaSolution.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Basic Asp.net core DI method ( Reqister services there )
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:DiplomaSolution.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Request handling pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
