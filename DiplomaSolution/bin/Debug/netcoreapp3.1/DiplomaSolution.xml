<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiplomaSolution</name>
    </assembly>
    <members>
        <member name="T:DiplomaSolution.Controllers.AboutController">
            <summary>
            Controller to get info about web-site
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.AboutController.GiveInfo">
            <summary>
            Method, that returns basic info pages
            </summary>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Controllers.AccountController">
            <summary>
            Controller to perform actions with accounts ( Create / ChangePassword and etc... )
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.SignInManager{DiplomaSolution.Models.ServiceUser},Microsoft.AspNetCore.Identity.UserManager{DiplomaSolution.Models.ServiceUser},DiplomaSolution.Services.Interfaces.ISendEmailService,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,DiplomaSolution.Services.Interfaces.IAccountService)">
            <summary>
            Basic construstor to perform DI
            </summary>
            <param name="signInManager"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.Login(DiplomaSolution.ViewModels.LoginViewModel,System.String)">
            <summary>
            Basic action to perform login for both external and our own customers
            </summary>
            <param name="customer">Customer model</param>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.Login(System.String)">
            <summary>
            Get action to return login page ( currently is not fully inmplemented )
            </summary>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <returns>Login page</returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ExternalLogIn(System.String,System.String)">
            <summary>
            Action to perform extermal provider login ( Google, Facebook and etc... )
            </summary>
            <param name="provider">Provider name</param>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ExternalLoginCallBack(System.String,System.String)">
            <summary>
            External login callback to perform login operations on our side if login was successful
            </summary>
            <param name="returnUrl">Optional - can perofrm redirect later to this url</param>
            <param name="remoteError">Optional - can be null, if everything is okey while login on provider side</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.Logout">
            <summary>
            Action to perdorm user logout ( delete cookies and clear User prop of basic controller class )
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ConfirmEmail(System.String,System.String)">
            <summary>
            Action to perform email confirmation --> filed EmailConfirmed is changing to true
            </summary>
            <param name="userId">User id, to find it</param>
            <param name="token">Generated token</param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.AccessDenied(System.String)">
            <summary>
            Access denied page
            </summary>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPasswordWithEmail">
            <summary>
            Action to return reset password view ( First step )
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPassword(DiplomaSolution.ViewModels.ResetPasswordConfirmationModel)">
            <summary>
            Reset password action
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPassword(System.String,System.String)">
            <summary>
            Step 3
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.AccountController.ResetPasswordConfirmationPage(DiplomaSolution.ViewModels.ResetPasswordModel)">
            <summary>
            (Step 2)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Controllers.ErrorController">
            <summary>
            Error handling controller ( handles exceptions and 400-599 error codes )
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.ErrorController.StatusCodeErrorHandler(System.Int32)">
            <summary>
            Action to handle status codes between 400 and 599 ( currently no error handling stuff )
            </summary>
            <param name="statuscode"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.ErrorController.ExceptionHandler">
            <summary>
            In case of exception this route will be executed, so we can see error list 
            </summary>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Controllers.HomePageController">
            <summary>
            Main page controller
            </summary>
        </member>
        <member name="P:DiplomaSolution.Controllers.HomePageController.FileManagerService">
            <summary>
            File manager service ( upload, etc.. )
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.HomePageController.#ctor(DiplomaSolution.Services.Interfaces.IFileManagerService,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Service resolving
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:DiplomaSolution.Controllers.HomePageController.Index">
            <summary>
            Action to return main page of the application
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.HomePageController.Index(DiplomaSolution.Models.IndexViewData)">
            <summary>
            Action to upload the photo to web-site ( change flow, so photo will be pinned with selected user )
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Controllers.RegistrationController">
            <summary>
            This controller is used to create customer and etc stuff...
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.RegistrationController.#ctor(Microsoft.Extensions.Logging.ILogger{DiplomaSolution.Controllers.RegistrationController},DiplomaSolution.Services.Interfaces.IRegistrationService)">
            <summary>
            Ctor to get all needed DI services
            </summary>
        </member>
        <member name="M:DiplomaSolution.Controllers.RegistrationController.ConfirmationPage(DiplomaSolution.Models.Customer)">
            <summary>
            Add there a return url to proceed with the customers ...
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.RegistrationController.ConfirmPartnerRegister(System.String)">
            <summary>
            Action to confirm partner registration
            </summary>
            <param name="emailUrlConfirmation"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Controllers.RegistrationController.RegistrationForm">
            <summary>
            Action to return registration form
            </summary>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Extensions.FileLoggerExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:DiplomaSolution.Extensions.FileLoggerExtension.AddFileLogger(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Helpers.Attributes.EmailPatternAttribute.IsValid(System.Object)">
            <summary>
            Overrided method to validate provided email ( if true --> email template is good )
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Middlewares.VersionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Models.Customer">
            <summary>
            //todo - add DataAnnotation to specify the label name using param Display
            </summary>
        </member>
        <member name="T:DiplomaSolution.Models.CustomerContext">
            <summary>
            Class to represent DB tables
            </summary>
        </member>
        <member name="P:DiplomaSolution.Models.CustomerContext.Customers">
            <summary>
            Todo - for now is not used ( remove )
            </summary>
        </member>
        <member name="M:DiplomaSolution.Models.CustomerContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{DiplomaSolution.Models.CustomerContext})">
            <summary>
            Constractor to set-up DB
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:DiplomaSolution.Models.CustomerContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Method to change data model of different tables
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:DiplomaSolution.Models.StatusCodesEnum">
            <summary>
            Enum to describe response from authorization or other services provided to login customer or etc...
            </summary>
        </member>
        <member name="F:DiplomaSolution.Models.StatusCodesEnum.Ok">
            <summary>
            Data was handled no more actions needed ( it should be used in case of endpoint )
            </summary>
        </member>
        <member name="F:DiplomaSolution.Models.StatusCodesEnum.RedirectNeeded">
            <summary>
            Data was handled but redirect needed to next action 
            </summary>
        </member>
        <member name="F:DiplomaSolution.Models.StatusCodesEnum.BadDataProvided">
            <summary>
            Customer provided bad data --> return again view with validation errors
            </summary>
        </member>
        <member name="T:DiplomaSolution.Models.TrainModels.TrainModel">
            <summary>
            General model to perform all needed validation and other TAG helpers actions
            </summary>
        </member>
        <member name="T:DiplomaSolution.Models.AccountResponseCheckData">
            <summary>
            General response model for services that provide some operations with account
            </summary>
        </member>
        <member name="P:DiplomaSolution.Models.AccountResponseCheckData.ValidationErrors">
            <summary>
            List with returned validation errors in case of unvalid validation
            </summary>
        </member>
        <member name="P:DiplomaSolution.Models.AccountResponseCheckData.StatusCode">
            <summary>
            Returned from the service status code to specify what should be done next
            </summary>
        </member>
        <member name="P:DiplomaSolution.Models.AccountResponseCheckData.ResponseData">
            <summary>
            Response data to next redirect, or to provide viewModel
            </summary>
        </member>
        <member name="P:DiplomaSolution.Models.AccountResponseCheckData.RedirectUrl">
            <summary>
            Can be null in case of no redirect need ( if 300 status code )
            </summary>
        </member>
        <member name="T:DiplomaSolution.Models.IndexViewData">
            <summary>
            
            </summary>
        </member>
        <member name="P:DiplomaSolution.Models.IndexViewData.FormFileData">
            <summary>
            
            </summary>
        </member>
        <member name="P:DiplomaSolution.Models.IndexViewData.Customer">
            <summary>
            
            </summary>
        </member>
        <member name="T:DiplomaSolution.Program">
            <summary>
            Class to perform configuration and build of the web-host
            </summary>
        </member>
        <member name="M:DiplomaSolution.Program.Main(System.String[])">
            <summary>
            entery point in the application ( app starts as console app ) --> we have class program and method main
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DiplomaSolution.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Custom method to return configured web-host ( IWebHost ) instanse
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Security.EmailTokenOptions">
            <summary>
            Custom token provider options to specify token life-span
            </summary>
        </member>
        <member name="T:DiplomaSolution.Security.DefaultHandler">
            <summary>
            Default handler to check if whe have needed claims
            </summary>
        </member>
        <member name="P:DiplomaSolution.Services.Classes.AccountService.SignInManager">
            <summary>
            Main service from Identity to perform signIn of the user
            </summary>
        </member>
        <member name="P:DiplomaSolution.Services.Classes.AccountService.UserManager">
            <summary>
            Main service from Identity to perform user register / remove / verification and etc...
            </summary>
        </member>
        <member name="P:DiplomaSolution.Services.Classes.AccountService.SendEmailService">
            <summary>
            Custom service to perform email sending using SendGrind functional
            </summary>
        </member>
        <member name="P:DiplomaSolution.Services.Classes.AccountService.DataProtectionProvider">
            <summary>
            System interface for security purpose
            </summary>
        </member>
        <member name="P:DiplomaSolution.Services.Classes.AccountService.Protector">
            <summary>
            Data protector to hide request data provided in query string
            </summary>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.AccountService.#ctor(Microsoft.AspNetCore.Identity.SignInManager{DiplomaSolution.Models.ServiceUser},Microsoft.AspNetCore.Identity.UserManager{DiplomaSolution.Models.ServiceUser},DiplomaSolution.Services.Interfaces.ISendEmailService,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)">
            <summary>
            Basic construstor to perform DI
            </summary>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.AccountService.LoginCustomer(DiplomaSolution.ViewModels.LoginViewModel,System.String)">
            <summary>
            Main method to perform login of the customer
            </summary>
            <param name="customer"></param>
            <param name="returnUrl"></param>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.AccountService.ExternalLoginCallBack(System.String,System.String)">
            <summary>
            Method to perform login of the external customer
            </summary>
            <param name="returnUrl"></param>
            <param name="remoteError"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.FileManagerService.LoadFileToTheServer(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Loads customer images to DB to deal with them in future
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:DiplomaSolution.Services.Classes.RegistrationService">
            <summary>
            Service for completing registering  customers that are registered by our web-site
            </summary>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.RegistrationService.#ctor(Microsoft.Extensions.Logging.ILogger{DiplomaSolution.Services.Classes.RegistrationService},Microsoft.AspNetCore.Identity.UserManager{DiplomaSolution.Models.ServiceUser},Microsoft.AspNetCore.Identity.SignInManager{DiplomaSolution.Models.ServiceUser},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},DiplomaSolution.Services.Interfaces.ISendEmailService)">
            <summary>
            Ctor to get all needed DI services
            </summary>
            <param name="logger"></param>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="roleManager"></param>
            <param name="sendEmailService"></param>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.RegistrationService.CompleteRegistration(DiplomaSolution.Models.Customer)">
            <summary>
            Method to perform customer registration in case, that he provided correct data to us
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Services.Classes.RegistrationService.CheckIfWeHaveRole(System.String)">
            <summary>
            Method to verify, that we have needed role, before appling it to customer
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:DiplomaSolution.Services.Interfaces.IAccountService.LoginCustomer(DiplomaSolution.ViewModels.LoginViewModel,System.String)">
            <summary>
            Main method to perform customer login in our system
            </summary>
        </member>
        <member name="M:DiplomaSolution.Services.Interfaces.IAccountService.ExternalLoginCallBack(System.String,System.String)">
            <summary>
            Callback method to login customer in case if he decided to login usin external provider
            </summary>
            <param name="returnUrl"></param>
            <param name="remoteError"></param>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Services.Interfaces.IRegistrationService">
            <summary>
            Service with logic with registration customers
            </summary>
        </member>
        <member name="M:DiplomaSolution.Services.Interfaces.IRegistrationService.CompleteRegistration(DiplomaSolution.Models.Customer)">
            <summary>
            Method to perform customer registration in case when he provided to us valid data
            </summary>
            <returns></returns>
        </member>
        <member name="T:DiplomaSolution.Startup">
            <summary>
            Basic class, what creates request handling pipeline and DI provider
            </summary>
        </member>
        <member name="P:DiplomaSolution.Startup.Configuration">
            <summary>
            Basic configuration prop what stores all provided configurations
            </summary>
        </member>
        <member name="M:DiplomaSolution.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Ctop to get configurations
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:DiplomaSolution.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Basic Asp.net core DI method ( Reqister services there )
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:DiplomaSolution.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Request handling pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
